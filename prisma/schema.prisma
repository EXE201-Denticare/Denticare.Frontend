generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model efmigrationshistory {
  MigrationId    String @id @db.VarChar(150)
  ProductVersion String @db.VarChar(32)

  @@map("__efmigrationshistory")
}

model appointment {
  appointment_id         String                @id @db.Char(50)
  appointment_date       DateTime              @db.Date
  appointment_start_time DateTime              @db.Time(6)
  appointment_end_time   DateTime              @db.Time(6)
  appointment_type       Int
  appointment_status     Int                   @db.SmallInt
  clinic_id              Int
  customer_id            String                @db.Char(36)
  dentist_id             String                @db.Char(36)
  clinic                 clinic                @relation(fields: [clinic_id], references: [clinic_id], onDelete: Cascade, onUpdate: NoAction, map: "FK_appointment_clinic_clinic_id")
  dentist                dentist               @relation(fields: [dentist_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "FK_appointment_dentist_dentist_id")
  treatment_detail       treatment_detail      @relation(fields: [appointment_id], references: [appointment_id], onDelete: Cascade, onUpdate: NoAction, map: "FK_appointment_treatment_detail_appointment_id")
  user                   user                  @relation(fields: [customer_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "FK_appointment_user_customer_id")
  appointment_service    appointment_service[]

  @@index([clinic_id], map: "IX_appointment_clinic_id")
  @@index([customer_id], map: "IX_appointment_customer_id")
  @@index([dentist_id], map: "IX_appointment_dentist_id")
}

model appointment_service {
  appointment_service_id Int         @id @default(autoincrement())
  appointment_id         String      @db.Char(50)
  service_id             Int
  appointment            appointment @relation(fields: [appointment_id], references: [appointment_id], onDelete: Cascade, onUpdate: NoAction, map: "FK_appointment_service_appointment_appointment_id")
  service                service     @relation(fields: [service_id], references: [service_id], onDelete: Cascade, onUpdate: NoAction, map: "FK_appointment_service_service_service_id")

  @@index([appointment_id], map: "IX_appointment_service_appointment_id")
  @@index([service_id], map: "IX_appointment_service_service_id")
}

model area {
  area_id   Int      @id @default(autoincrement())
  area_name String   @db.VarChar(100)
  clinic    clinic[]
}

model certificate {
  certificate_id     Int       @id @default(autoincrement())
  certificate_name   String    @db.VarChar(300)
  certificate_number String    @unique(map: "IX_certificate_certificate_number") @db.VarChar(10)
  issued_date        DateTime  @db.DateTime(6)
  expired_date       DateTime? @db.DateTime(6)
  certificate_image  String?   @db.Text
  dentist_id         String    @db.Char(36)
  dentist            dentist   @relation(fields: [dentist_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "FK_certificate_dentist_dentist_id")

  @@index([dentist_id], map: "IX_certificate_dentist_id")
}

model clinic {
  clinic_id           Int               @id @default(autoincrement())
  clinic_name         String            @db.VarChar(200)
  license_number      String            @db.VarChar(50)
  clinic_address      String            @db.VarChar(300)
  clinic_phone_number String?           @db.VarChar(12)
  employee_size       Int
  owner_id            String            @db.Char(36)
  area_id             Int
  clinic_state        Int               @db.SmallInt
  appointment         appointment[]
  area                area              @relation(fields: [area_id], references: [area_id], onDelete: Cascade, onUpdate: NoAction, map: "FK_clinic_area_area_id")
  user                user              @relation(fields: [owner_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "FK_clinic_user_owner_id")
  clinic_dentist      clinic_dentist[]
  clinic_feedback     clinic_feedback[]
  service             service[]

  @@index([area_id], map: "IX_clinic_area_id")
  @@index([owner_id], map: "IX_clinic_owner_id")
}

model clinic_dentist {
  cd_no      Int     @id @default(autoincrement())
  clinic_id  Int
  dentist_id String  @db.Char(36)
  clinic     clinic  @relation(fields: [clinic_id], references: [clinic_id], onDelete: Cascade, onUpdate: NoAction, map: "FK_clinic_dentist_clinic_clinic_id")
  dentist    dentist @relation(fields: [dentist_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "FK_clinic_dentist_dentist_dentist_id")

  @@index([clinic_id], map: "IX_clinic_dentist_clinic_id")
  @@index([dentist_id], map: "IX_clinic_dentist_dentist_id")
}

model clinic_feedback {
  clinic_fb_id   Int      @id @default(autoincrement())
  clinic_id      Int
  customer_id    String   @db.Char(36)
  rating         Int      @db.SmallInt
  fb_description String?  @db.VarChar(300)
  fb_date        DateTime @db.DateTime(6)
  clinic         clinic   @relation(fields: [clinic_id], references: [clinic_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_clinic_feedback_clinic_clinic_id")
  user           user     @relation(fields: [customer_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_clinic_feedback_user_customer_id")

  @@index([clinic_id], map: "IX_clinic_feedback_clinic_id")
  @@index([customer_id], map: "IX_clinic_feedback_customer_id")
}

model dentist {
  user_id                   String             @id @db.Char(36)
  first_name                String             @db.VarChar(50)
  last_name                 String             @db.VarChar(150)
  email                     String             @db.VarChar(100)
  password                  String             @db.VarChar(75)
  phone_number              String             @db.VarChar(10)
  citizen_id                String?            @db.VarChar(12)
  date_of_birth             DateTime           @db.DateTime(6)
  sex                       Int                @db.SmallInt
  refresh_token             String?            @db.LongText
  refresh_token_expiry_time DateTime           @db.DateTime(6)
  appointment               appointment[]
  certificate               certificate[]
  clinic_dentist            clinic_dentist[]
  dentist_schedule          dentist_schedule[]
}

model dentist_schedule {
  schedule_id        String    @db.Char(36)
  doctor_id          String    @db.Char(36)
  working_date       DateTime? @db.Date
  working_start_time DateTime  @db.Time(6)
  working_end_time   DateTime  @db.Time(6)
  dentist            dentist   @relation(fields: [doctor_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "FK_dentist_schedule_dentist_doctor_id")

  @@id([schedule_id, doctor_id])
  @@index([doctor_id], map: "IX_dentist_schedule_doctor_id")
}

model service {
  service_id          Int                   @id @default(autoincrement())
  service_name        String                @db.VarChar(200)
  description         String?               @db.VarChar(300)
  service_price       Float
  clinic_id           Int
  appointment_service appointment_service[]
  clinic              clinic                @relation(fields: [clinic_id], references: [clinic_id], onDelete: Cascade, onUpdate: NoAction, map: "FK_service_clinic_clinic_id")

  @@index([clinic_id], map: "IX_service_clinic_id")
}

model treatment_detail {
  treatment_detail_id Int          @id @default(autoincrement())
  appointment_id      String       @unique(map: "AK_treatment_detail_appointment_id") @db.Char(50)
  details             String?      @db.Text
  appointment         appointment?
}

model user {
  user_id                   String            @id @db.Char(36)
  first_name                String            @db.VarChar(50)
  last_name                 String?           @db.VarChar(150)
  email                     String            @db.VarChar(100)
  password                  String            @db.VarChar(75)
  phone_number              String?           @db.VarChar(10)
  citizen_id                String?           @db.VarChar(12)
  date_of_birth             DateTime?         @db.DateTime(6)
  address                   String?           @db.LongText
  sex                       Int               @db.SmallInt
  role                      String            @db.Char(4)
  refresh_token             String?           @db.LongText
  refresh_token_expiry_time DateTime          @db.DateTime(6)
  appointment               appointment[]
  clinic                    clinic[]
  clinic_feedback           clinic_feedback[]
}
